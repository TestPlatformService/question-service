// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: question.proto

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	// question
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*QuestionId, error)
	GetQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	GetAllQuestions(ctx context.Context, in *GetAllQuestionsRequest, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*Void, error)
	UploadImageQuestion(ctx context.Context, in *UploadImageQuestionRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteImageQuestion(ctx context.Context, in *DeleteImageQuestionRequest, opts ...grpc.CallOption) (*Void, error)
	// output
	CreateQuestionOutput(ctx context.Context, in *CreateQuestionOutputRequest, opts ...grpc.CallOption) (*QuestionOutputId, error)
	GetQuestionOutput(ctx context.Context, in *QuestionOutputId, opts ...grpc.CallOption) (*GetQuestionOutputResponse, error)
	GetAllQuestionOutputsByQuestionId(ctx context.Context, in *GetAllQuestionOutputsByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllQuestionOutputsByQuestionIdResponse, error)
	UpdateQuestionOutput(ctx context.Context, in *UpdateQuestionOutputRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteQuestionOutput(ctx context.Context, in *DeleteQuestionOutputRequest, opts ...grpc.CallOption) (*Void, error)
	// input
	CreateQuestionInput(ctx context.Context, in *CreateQuestionInputRequest, opts ...grpc.CallOption) (*QuestionInputId, error)
	GetQuestionInput(ctx context.Context, in *QuestionInputId, opts ...grpc.CallOption) (*GetQuestionInputResponse, error)
	GetAllQuestionInputsByQuestionId(ctx context.Context, in *GetAllQuestionInputsByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllQuestionInputsByQuestionIdResponse, error)
	UpdateQuestionInput(ctx context.Context, in *UpdateQuestionInputRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteQuestionInput(ctx context.Context, in *DeleteQuestionInputRequest, opts ...grpc.CallOption) (*Void, error)
	// test_case
	CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*TestCaseId, error)
	GetTestCase(ctx context.Context, in *TestCaseId, opts ...grpc.CallOption) (*GetTestCaseResponse, error)
	GetAllTestCasesByQuestionId(ctx context.Context, in *GetAllTestCasesByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllTestCasesByQuestionIdResponse, error)
	UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*Void, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*QuestionId, error) {
	out := new(QuestionId)
	err := c.cc.Invoke(ctx, "/question.QuestionService/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestion(ctx context.Context, in *QuestionId, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetAllQuestions(ctx context.Context, in *GetAllQuestionsRequest, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error) {
	out := new(GetAllQuestionsResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetAllQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UploadImageQuestion(ctx context.Context, in *UploadImageQuestionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/UploadImageQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteImageQuestion(ctx context.Context, in *DeleteImageQuestionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/DeleteImageQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestionOutput(ctx context.Context, in *CreateQuestionOutputRequest, opts ...grpc.CallOption) (*QuestionOutputId, error) {
	out := new(QuestionOutputId)
	err := c.cc.Invoke(ctx, "/question.QuestionService/CreateQuestionOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionOutput(ctx context.Context, in *QuestionOutputId, opts ...grpc.CallOption) (*GetQuestionOutputResponse, error) {
	out := new(GetQuestionOutputResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetQuestionOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetAllQuestionOutputsByQuestionId(ctx context.Context, in *GetAllQuestionOutputsByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllQuestionOutputsByQuestionIdResponse, error) {
	out := new(GetAllQuestionOutputsByQuestionIdResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetAllQuestionOutputsByQuestionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestionOutput(ctx context.Context, in *UpdateQuestionOutputRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/UpdateQuestionOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestionOutput(ctx context.Context, in *DeleteQuestionOutputRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/DeleteQuestionOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestionInput(ctx context.Context, in *CreateQuestionInputRequest, opts ...grpc.CallOption) (*QuestionInputId, error) {
	out := new(QuestionInputId)
	err := c.cc.Invoke(ctx, "/question.QuestionService/CreateQuestionInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionInput(ctx context.Context, in *QuestionInputId, opts ...grpc.CallOption) (*GetQuestionInputResponse, error) {
	out := new(GetQuestionInputResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetQuestionInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetAllQuestionInputsByQuestionId(ctx context.Context, in *GetAllQuestionInputsByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllQuestionInputsByQuestionIdResponse, error) {
	out := new(GetAllQuestionInputsByQuestionIdResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetAllQuestionInputsByQuestionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestionInput(ctx context.Context, in *UpdateQuestionInputRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/UpdateQuestionInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestionInput(ctx context.Context, in *DeleteQuestionInputRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/DeleteQuestionInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*TestCaseId, error) {
	out := new(TestCaseId)
	err := c.cc.Invoke(ctx, "/question.QuestionService/CreateTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetTestCase(ctx context.Context, in *TestCaseId, opts ...grpc.CallOption) (*GetTestCaseResponse, error) {
	out := new(GetTestCaseResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetAllTestCasesByQuestionId(ctx context.Context, in *GetAllTestCasesByQuestionIdRequest, opts ...grpc.CallOption) (*GetAllTestCasesByQuestionIdResponse, error) {
	out := new(GetAllTestCasesByQuestionIdResponse)
	err := c.cc.Invoke(ctx, "/question.QuestionService/GetAllTestCasesByQuestionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/UpdateTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/question.QuestionService/DeleteTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	// question
	CreateQuestion(context.Context, *CreateQuestionRequest) (*QuestionId, error)
	GetQuestion(context.Context, *QuestionId) (*GetQuestionResponse, error)
	GetAllQuestions(context.Context, *GetAllQuestionsRequest) (*GetAllQuestionsResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Void, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*Void, error)
	UploadImageQuestion(context.Context, *UploadImageQuestionRequest) (*Void, error)
	DeleteImageQuestion(context.Context, *DeleteImageQuestionRequest) (*Void, error)
	// output
	CreateQuestionOutput(context.Context, *CreateQuestionOutputRequest) (*QuestionOutputId, error)
	GetQuestionOutput(context.Context, *QuestionOutputId) (*GetQuestionOutputResponse, error)
	GetAllQuestionOutputsByQuestionId(context.Context, *GetAllQuestionOutputsByQuestionIdRequest) (*GetAllQuestionOutputsByQuestionIdResponse, error)
	UpdateQuestionOutput(context.Context, *UpdateQuestionOutputRequest) (*Void, error)
	DeleteQuestionOutput(context.Context, *DeleteQuestionOutputRequest) (*Void, error)
	// input
	CreateQuestionInput(context.Context, *CreateQuestionInputRequest) (*QuestionInputId, error)
	GetQuestionInput(context.Context, *QuestionInputId) (*GetQuestionInputResponse, error)
	GetAllQuestionInputsByQuestionId(context.Context, *GetAllQuestionInputsByQuestionIdRequest) (*GetAllQuestionInputsByQuestionIdResponse, error)
	UpdateQuestionInput(context.Context, *UpdateQuestionInputRequest) (*Void, error)
	DeleteQuestionInput(context.Context, *DeleteQuestionInputRequest) (*Void, error)
	// test_case
	CreateTestCase(context.Context, *CreateTestCaseRequest) (*TestCaseId, error)
	GetTestCase(context.Context, *TestCaseId) (*GetTestCaseResponse, error)
	GetAllTestCasesByQuestionId(context.Context, *GetAllTestCasesByQuestionIdRequest) (*GetAllTestCasesByQuestionIdResponse, error)
	UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*Void, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*Void, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*QuestionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestion(context.Context, *QuestionId) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) GetAllQuestions(context.Context, *GetAllQuestionsRequest) (*GetAllQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) UploadImageQuestion(context.Context, *UploadImageQuestionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteImageQuestion(context.Context, *DeleteImageQuestionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestionOutput(context.Context, *CreateQuestionOutputRequest) (*QuestionOutputId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionOutput not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestionOutput(context.Context, *QuestionOutputId) (*GetQuestionOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionOutput not implemented")
}
func (UnimplementedQuestionServiceServer) GetAllQuestionOutputsByQuestionId(context.Context, *GetAllQuestionOutputsByQuestionIdRequest) (*GetAllQuestionOutputsByQuestionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestionOutputsByQuestionId not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestionOutput(context.Context, *UpdateQuestionOutputRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionOutput not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestionOutput(context.Context, *DeleteQuestionOutputRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionOutput not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestionInput(context.Context, *CreateQuestionInputRequest) (*QuestionInputId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionInput not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestionInput(context.Context, *QuestionInputId) (*GetQuestionInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionInput not implemented")
}
func (UnimplementedQuestionServiceServer) GetAllQuestionInputsByQuestionId(context.Context, *GetAllQuestionInputsByQuestionIdRequest) (*GetAllQuestionInputsByQuestionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestionInputsByQuestionId not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestionInput(context.Context, *UpdateQuestionInputRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionInput not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestionInput(context.Context, *DeleteQuestionInputRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionInput not implemented")
}
func (UnimplementedQuestionServiceServer) CreateTestCase(context.Context, *CreateTestCaseRequest) (*TestCaseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (UnimplementedQuestionServiceServer) GetTestCase(context.Context, *TestCaseId) (*GetTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCase not implemented")
}
func (UnimplementedQuestionServiceServer) GetAllTestCasesByQuestionId(context.Context, *GetAllTestCasesByQuestionIdRequest) (*GetAllTestCasesByQuestionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTestCasesByQuestionId not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCase not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestion(ctx, req.(*QuestionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetAllQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetAllQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetAllQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetAllQuestions(ctx, req.(*GetAllQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UploadImageQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UploadImageQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/UploadImageQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UploadImageQuestion(ctx, req.(*UploadImageQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteImageQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteImageQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/DeleteImageQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteImageQuestion(ctx, req.(*DeleteImageQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestionOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestionOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/CreateQuestionOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestionOutput(ctx, req.(*CreateQuestionOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionOutputId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetQuestionOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionOutput(ctx, req.(*QuestionOutputId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetAllQuestionOutputsByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionOutputsByQuestionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetAllQuestionOutputsByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetAllQuestionOutputsByQuestionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetAllQuestionOutputsByQuestionId(ctx, req.(*GetAllQuestionOutputsByQuestionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestionOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestionOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/UpdateQuestionOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestionOutput(ctx, req.(*UpdateQuestionOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestionOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestionOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/DeleteQuestionOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestionOutput(ctx, req.(*DeleteQuestionOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestionInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestionInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/CreateQuestionInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestionInput(ctx, req.(*CreateQuestionInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionInputId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetQuestionInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionInput(ctx, req.(*QuestionInputId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetAllQuestionInputsByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionInputsByQuestionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetAllQuestionInputsByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetAllQuestionInputsByQuestionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetAllQuestionInputsByQuestionId(ctx, req.(*GetAllQuestionInputsByQuestionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestionInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestionInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/UpdateQuestionInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestionInput(ctx, req.(*UpdateQuestionInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestionInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestionInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/DeleteQuestionInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestionInput(ctx, req.(*DeleteQuestionInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/CreateTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateTestCase(ctx, req.(*CreateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetTestCase(ctx, req.(*TestCaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetAllTestCasesByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTestCasesByQuestionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetAllTestCasesByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/GetAllTestCasesByQuestionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetAllTestCasesByQuestionId(ctx, req.(*GetAllTestCasesByQuestionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/UpdateTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateTestCase(ctx, req.(*UpdateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.QuestionService/DeleteTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _QuestionService_GetQuestion_Handler,
		},
		{
			MethodName: "GetAllQuestions",
			Handler:    _QuestionService_GetAllQuestions_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionService_DeleteQuestion_Handler,
		},
		{
			MethodName: "UploadImageQuestion",
			Handler:    _QuestionService_UploadImageQuestion_Handler,
		},
		{
			MethodName: "DeleteImageQuestion",
			Handler:    _QuestionService_DeleteImageQuestion_Handler,
		},
		{
			MethodName: "CreateQuestionOutput",
			Handler:    _QuestionService_CreateQuestionOutput_Handler,
		},
		{
			MethodName: "GetQuestionOutput",
			Handler:    _QuestionService_GetQuestionOutput_Handler,
		},
		{
			MethodName: "GetAllQuestionOutputsByQuestionId",
			Handler:    _QuestionService_GetAllQuestionOutputsByQuestionId_Handler,
		},
		{
			MethodName: "UpdateQuestionOutput",
			Handler:    _QuestionService_UpdateQuestionOutput_Handler,
		},
		{
			MethodName: "DeleteQuestionOutput",
			Handler:    _QuestionService_DeleteQuestionOutput_Handler,
		},
		{
			MethodName: "CreateQuestionInput",
			Handler:    _QuestionService_CreateQuestionInput_Handler,
		},
		{
			MethodName: "GetQuestionInput",
			Handler:    _QuestionService_GetQuestionInput_Handler,
		},
		{
			MethodName: "GetAllQuestionInputsByQuestionId",
			Handler:    _QuestionService_GetAllQuestionInputsByQuestionId_Handler,
		},
		{
			MethodName: "UpdateQuestionInput",
			Handler:    _QuestionService_UpdateQuestionInput_Handler,
		},
		{
			MethodName: "DeleteQuestionInput",
			Handler:    _QuestionService_DeleteQuestionInput_Handler,
		},
		{
			MethodName: "CreateTestCase",
			Handler:    _QuestionService_CreateTestCase_Handler,
		},
		{
			MethodName: "GetTestCase",
			Handler:    _QuestionService_GetTestCase_Handler,
		},
		{
			MethodName: "GetAllTestCasesByQuestionId",
			Handler:    _QuestionService_GetAllTestCasesByQuestionId_Handler,
		},
		{
			MethodName: "UpdateTestCase",
			Handler:    _QuestionService_UpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _QuestionService_DeleteTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question.proto",
}
